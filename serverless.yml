

service:
  name: cloud-buddy
  publish: false


# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  role: buddySecurityRole

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  artifact: build/distributions/cloud-buddy.zip

functions:
  echosns:
    handler: com.cloudsecurity.lambda.EchoSNS
    timeout: 30
    events:
      - sns: needs-attention
  failedalerts:
    handler: com.cloudsecurity.lambda.EchoSNS
    timeout: 30
    events:
      - sns: failed-alerts
  dumptos3:
    handler: com.cloudsecurity.lambda.DumpToS3Bucket
    timeout: 30
    events:
      - sns: failed-alerts
    environment:
      TARGET_S3_BUCKET: ${file(./config.yml):s3_failed_alerts_bucket}
  securityUsingSNS:
    handler: com.cloudsecurity.lambda.SecurityUsingSNS
    timeout: 30
    events:
      - sns: needs-attention
    environment:
      TARGET_ACCOUNT_ROLE: arn:aws:iam::${file(./config.yml):ACCOUNT_ID}:role/ForCloudBuddySecurityAuditRole
      BUDDY_ACCOUNT_ID: ${file(./config.yml):BUDDY_ACCOUNT_ID}
  executeSNSRule:
    handler: com.cloudsecurity.lambda.ondemand.ExecuteSNSRule
    timeout: 30
    events:
      - http:
          path: executeSNSRule/{rule}
          method: post
          request:
            parameters:
              paths:
                rule: true
    environment:
      TARGET_ACCOUNT_ROLE: arn:aws:iam::${file(./config.yml):ACCOUNT_ID}:role/ForCloudBuddySecurityAuditRole
      BUDDY_ACCOUNT_ID: ${file(./config.yml):BUDDY_ACCOUNT_ID}
  executeSDKRule:
    handler: com.cloudsecurity.lambda.ondemand.ExecuteSDKRule
    timeout: 30
    events:
      - http:
          path: executeSDKRule/{rule}
          method: get
          request:
            parameters:
              paths:
                rule: true
              querystrings:
                resource: true
    environment:
      TARGET_ACCOUNT_ROLE: arn:aws:iam::${file(./config.yml):ACCOUNT_ID}:role/ForCloudBuddySecurityAuditRole
      BUDDY_ACCOUNT_ID: ${file(./config.yml):BUDDY_ACCOUNT_ID}
  executeDSLRule:
    handler: com.cloudsecurity.lambda.ondemand.ExecuteDSLRule
    timeout: 30
    events:
      - http:
          path: executeDSLRule/{rule}
          method: get
          request:
            parameters:
              paths:
                rule: true
              querystrings:
                resource: true
    environment:
      TARGET_ACCOUNT_ROLE: arn:aws:iam::${file(./config.yml):ACCOUNT_ID}:role/ForCloudBuddySecurityAuditRole
      BUDDY_ACCOUNT_ID: ${file(./config.yml):BUDDY_ACCOUNT_ID}


# you can add CloudFormation resource templates here
resources:
  Resources:
    failedAlertsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${file(./config.yml):s3_failed_alerts_bucket}
    buddySecurityRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: BuddySecurityRole
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSNSFullAccess
          - arn:aws:iam::aws:policy/CloudWatchFullAccess
        Policies:
          - PolicyName: assumeMySecurityAuditRole
            PolicyDocument:
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - "sts:AssumeRole"
                  Resource:
                    - "arn:aws:iam::${file(./config.yml):ACCOUNT_ID}:role/ForCloudBuddySecurityAuditRole"
          - PolicyName: writeFailedAlerts
            PolicyDocument:
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - "s3:*"
                  Resource:
                    -  "arn:aws:s3:::${file(./config.yml):s3_failed_alerts_bucket}"
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - "s3:*"
                  Resource:
                    -  "arn:aws:s3:::${file(./config.yml):s3_failed_alerts_bucket}/*"
