# Welcome to Serverless!
#
# This file is the main config file for your service.  # It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service:
  name: cloud-buddy
  publish: false


# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8
  role: devOpsSecurityRole


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  artifact: build/distributions/cloud-buddy.zip

functions:
  echosns:
    handler: com.cloudsecurity.lambda.EchoSNS
    timeout: 30
    events:
      - sns:
          arn:
            Fn::Join:
              - ""
              - - "arn:aws:sns:"
                -  Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":needs-attention"
          topicName: needs-attention
  failedalerts:
    handler: com.serverless.EchoSNS
    timeout: 30
    events:
      - sns:
          arn:
            Fn::Join:
              - ""
              - - "arn:aws:sns:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":failed-alerts"
          topicName: failed-alerts
  dumptos3:
    handler: com.cloudsecurity.lambda.DumpToS3Bucket
    timeout: 30
    events:
      - sns:
          arn:
            Fn::Join:
              - ""
              - - "arn:aws:sns:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":failed-alerts"
          topicName: failed-alerts
    environment:
      TARGET_S3_BUCKET: ${file(./config.dev.yml):s3_failed_alerts_bucket}
  securityfailures:
    handler: com.cloudsecurity.lambda.LookSecurityFailures
    timeout: 30
    events:
      - sns:
          arn:
            Fn::Join:
              - ""
              - - "arn:aws:sns:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":needs-attention"
          topicName: needs-attention
    environment:
      TARGET_ACCOUNT_ROLE: arn:aws:iam::${file(./config.dev.yml):ACCOUNT_ID}:role/ForCloudBuddySecurityAuditRole
      SIMULATION_CALLER_ARN: ${file(./config.dev.yml):SIMULATION_CALLER_ARN}
  executeRule:
    handler: com.cloudsecurity.lambda.ondemand.ExecuteRule
    timeout: 30
    events:
      - http:
          path: executeRule/{rule}
          method: get
          request:
            parameters:
              paths:
                rule: true
              querystrings:
                resource: true
    environment:
      TARGET_ACCOUNT_ROLE: arn:aws:iam::${file(./config.dev.yml):ACCOUNT_ID}:role/ForCloudBuddySecurityAuditRole
      SIMULATION_CALLER_ARN: ${file(./config.dev.yml):SIMULATION_CALLER_ARN}
  executeDSLRule:
    handler: com.cloudsecurity.lambda.ondemand.ExecuteDSLRule
    timeout: 30
    events:
      - http:
          path: executeDSLRule/{rule}
          method: get
          request:
            parameters:
              paths:
                rule: true
              querystrings:
                resource: true
    environment:
      TARGET_ACCOUNT_ROLE: arn:aws:iam::${file(./config.dev.yml):ACCOUNT_ID}:role/ForCloudBuddySecurityAuditRole
      SIMULATION_CALLER_ARN: ${file(./config.dev.yml):SIMULATION_CALLER_ARN}


# you can add CloudFormation resource templates here
resources:
  Resources:
    devOpsSecurityRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: DevOpsSecurityRole
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSNSFullAccess
          - arn:aws:iam::aws:policy/CloudWatchFullAccess
        Policies:
          - PolicyName: assumeMySecurityAuditRole
            PolicyDocument:
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - "sts:AssumeRole"
                  Resource:
                    - "arn:aws:iam::${file(./config.dev.yml):ACCOUNT_ID}:role/ForCloudBuddySecurityAuditRole"
          - PolicyName: writeFailedAlerts
            PolicyDocument:
              Statement:
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - "s3:*"
                  Resource:
                    -  "arn:aws:s3:::${file(./config.dev.yml):s3_failed_alerts_bucket}"
                - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
                  Action:
                    - "s3:*"
                  Resource:
                    -  "arn:aws:s3:::${file(./config.dev.yml):s3_failed_alerts_bucket}/*"

#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
